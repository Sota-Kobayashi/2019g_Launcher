/*
 * speed_pid.cpp
 *
 *  Created on: 2019/03/31
 *      Author: User
 */

#include <speed_pid.hpp>

void Speed_pid::speedPID_update()
{
	static std::array<double, 2> dev = {};

	enum class termName {P, I, D};
	static std::map<termName, double> terms = {{termName::P, 0.0},{termName::I, 0.0},{termName::D, 0.0}};

	constexpr double Min = 60;
	double calNowSpeed = [=]{ return ( Min * readCount<double>() / ((double)ppr_ * controlInterval_)); };
	auto calDev = [=]{ return (targetSpeed_ - calNowSpeed()); };

	dev[1] = dev[0];
	dev[0] = calDev();
	nowCount_ += RotaryEncoder::readCount<uint32_t>();
	RotaryEncoder::clearCount();

	terms[termName::P] =  useGains_speed_.P * dev[0];
	terms[termName::I] += useGains_speed_.I * dev[0];
	terms[termName::D] =  useGains_speed_.D * (dev[0] - dev[1]);

	double setSpeed = 0.0;
	for(auto i : terms)setSpeed += i.second;

	MotorControl::setSpeed((int32_t)setSpeed, MotorControl::driveMode::SMB);
}
