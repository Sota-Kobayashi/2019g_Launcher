#include <motor_driver.hpp>

Motor::Motor(uint8_t DriverAddress, const SendParamsType& SetDriverParams)
{
	this->UsingMotorDriverAddress = DriverAddress;
	this->SendParams = SetDriverParams;
}
Motor::Motor(uint8_t DriverAddress)
{
	this->UsingMotorDriverAddress = DriverAddress;
}

void Motor::SetSpeed(int32_t Speed)
{
	std::array<uint8_t, MotorDriverDataArraySize> SendData = {};
	SendData[0] = this->NowMode;
	for(std::size_t i = 1 ; i < MotorDriverDataArraySize ; i++)
		SendData[i] = (uint8_t)(Speed >> 8 * (MotorDriverDataArraySize - (i+1)));

	ControlAreaNetwork::SendData(SendData, this->UsingMotorDriverAddress);
}

void Motor::ParamSendTable()
{
	constexpr uint16_t SendInterval_ms_ = 100;
	static uint16_t count = 0;

	if(!ParamsSendFlag)return;

	switch(count)
	{
	case (ParamSendMode::PIDgain_P-ParamSendMode::PIDgain_P)*SendInterval_ms_:
		MD_ParamSend(SendParams.PIDgain_P, ParamSendMode::PIDgain_P);
		break;

	case (ParamSendMode::PIDgain_I-ParamSendMode::PIDgain_P)*SendInterval_ms_:
		MD_ParamSend(SendParams.PIDgain_I, ParamSendMode::PIDgain_I);
		break;

	case (ParamSendMode::PIDgain_D-ParamSendMode::PIDgain_P)*SendInterval_ms_:
		MD_ParamSend(SendParams.PIDgain_D, ParamSendMode::PIDgain_D);
		break;

	case (ParamSendMode::SpeedMAX-ParamSendMode::PIDgain_P)*SendInterval_ms_:
		MD_ParamSend(SendParams.SpeedMAX, ParamSendMode::SpeedMAX);
		break;

	case (ParamSendMode::PPR-ParamSendMode::PIDgain_P)*SendInterval_ms_:
		MD_ParamSend(SendParams.PPR, ParamSendMode::PPR);
		ParamsSendFlag = false;
		count = 0;
		break;

	default:
		count++;
		break;
	}
}
