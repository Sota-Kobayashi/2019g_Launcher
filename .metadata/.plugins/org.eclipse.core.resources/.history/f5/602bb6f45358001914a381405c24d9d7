/*
 * led.h
 *
 *  Created on: 2019/03/12
 *      Author: User
 */

#ifndef MYHEADERS_LED_HPP_
#define MYHEADERS_LED_HPP_

#include "stm32f4xx.h"
#include "stm32f4xx_conf.h"

enum class ledColor : uint16_t { Yellow = 0x8000, Orange = 0x0004, Red = 0x0010 };
enum class state : bool { ON = true, OFF = false };

template<ledColor useColor>
class LED
{
public:
	LED()
	{
	/*Enable to supply clock for GPIOs.*/
	if constexpr(useColor == ledColor::Yellow)
	{
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	}
	else
	{
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	}


	/*Configuration GPIO pins.*/
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_StructInit(&GPIO_InitStruct);
	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_15;
	GPIO_InitStruct.GPIO_Mode	= GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_PuPd	= GPIO_PuPd_DOWN;
	GPIO_InitStruct.GPIO_OType	= GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed	= GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_2 | GPIO_Pin_4;
	GPIO_Init(GPIOB, &GPIO_InitStruct);
	}



	void setNewState(state newState)
	{
		GPIO_TypeDef* setGPIO =
				useColor == ledColor::Yellow ? GPIOA : GPIOB;

		if(newState == state::ON)GPIO_SetBits(setGPIO, (uint16_t)useColor);
		else GPIO_ResetBits(setGPIO, (uint16_t)useColor);
	}


	inline void toggle();

protected:
	constexpr GPIO_TypeDef* use_gpioPort_(){ return }
};



#endif /* MYHEADERS_LED_HPP_ */
