#ifndef __CAN_HPP__
#define __CAN_HPP__

#include <array>
#include <map>
#include <queue>
#include <utility>

#ifdef STM32F0
#include "stm32f0xx.h"
#ifdef USE_STDPERIPH_DRIVER
#include "stm32f0xx_conf.h"
#endif // if defined USE_STDPERIPH_DRIVER
#endif // if defined STM32F0

#ifdef STM32F3
#include "stm32f30x.h"
#ifdef USE_STDPERIPH_DRIVER
#include "stm32f30x_conf.h"
#endif // if defined USE_STDPERIPH_DRIVER
#endif // if defined STM32F3

#ifdef STM32F4
#include "stm32f4xx.h"
#ifdef USE_STDPERIPH_DRIVER
#include "stm32f4xx_conf.h"
#endif // if defined USE_STDPERIPH_DRIVER
#endif // if defined STM32F4

namespace ControlAreaNetwork {

void config(uint8_t Address);

/*
void sendData(uint8_t *Data, uint8_t DataLenge, uint8_t Address);

template<size_t S>
void sendData(const std::array<uint8_t, S> &SendDataArray, uint8_t Address)
{
	static_assert( !(S > 8), "array size is bigger than 8.");

	while(!(CAN1->TSR & CAN_TSR_TME0) && !(CAN1->TSR & CAN_TSR_TME1) && !(CAN1->TSR & CAN_TSR_TME2)); //To wait while mail boxes are pending.
	CanTxMsg CanTxMsgStructure;
	CanTxMsgStructure.StdId				= (uint32_t)Address;
	CanTxMsgStructure.IDE				= CAN_ID_STD;
	CanTxMsgStructure.RTR				= CAN_RTR_DATA;
	CanTxMsgStructure.DLC	= S;
	for(uint8_t i = 0 ; i < CanTxMsgStructure.DLC ; i++)CanTxMsgStructure.Data[i] = SendDataArray[i];
	CAN_Transmit(CAN1 , &CanTxMsgStructure);
}

void sendRemote(uint8_t Address);
*/

} // namespase ControlAreaNetwork

#endif
