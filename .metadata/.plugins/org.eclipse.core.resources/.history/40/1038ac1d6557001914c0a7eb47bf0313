/*
 * speed_pid.cpp
 *
 *  Created on: 2019/03/31
 *      Author: User
 */

#include <speed_pid.hpp>

void Speed_pid::speedPID_update()
{
	//static std::array<double, 2> dev = {};
	double dev_now = 0.0;
	static double dev_before = 0.0;

	enum termName : int{P, I, D};
	static std::map<int, double> terms = {{termName::P, 0.0},{termName::I, 0.0},{termName::D, 0.0}};

	constexpr double Min = 60.0;
	auto calNowSpeed = [=]{ return ( Min * readCount<double>() / ((double)ppr_ * controlInterval_)); };
	//auto calDev = [=]{ return (targetSpeed_ - calNowSpeed()); };

	dev_now = targetSpeed_ - calNowSpeed();
	nowCount_ += RotaryEncoder::readCount<uint32_t>();
	RotaryEncoder::clearCount();

	terms[termName::P] =  useGains_speed_.P * dev_now;
	terms[termName::I] += useGains_speed_.I * dev_now;
	terms[termName::D] =  useGains_speed_.D * (dev_now - dev_before);

	double setSpeed = 0.0;
	for(auto i : terms)setSpeed += i.second;

	if(isSpeedPID_Enable)
	{
		MotorControl::setSpeed((int32_t)setSpeed, MotorControl::driveMode::SMB);
		dev_before = dev_now;
	}
	else
	{
		dev_before = 0.0;
		terms[termName::I] = 0.0;
	}
}
