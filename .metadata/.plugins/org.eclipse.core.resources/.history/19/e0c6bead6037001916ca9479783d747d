#include "motor.h"

motorControl::motorControl()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_StructInit(&GPIO_InitStruct);
	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_InitStruct.GPIO_Mode	= GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_PuPd	= GPIO_PuPd_DOWN;
	GPIO_InitStruct.GPIO_OType	= GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed	= GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_0;
	GPIO_Init(GPIOB, &GPIO_InitStruct);


}

motorControl::motorControl(uint16_t period, uint16_t frequency)
{

}

void motorControl::setSpeed(const uint16_t& setValue) const
{

}

motorControl::~motorControl()
{

}

constexpr uint16_t motorControl::prescaler(const uint16_t resolution, const uint16_t pwmFreq, const uint32_t timerFrequency)
{
	return (timerFrequency / (pwmFreq * resolution));
}
