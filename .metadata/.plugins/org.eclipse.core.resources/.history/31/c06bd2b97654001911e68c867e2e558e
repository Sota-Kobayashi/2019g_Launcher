/*
 * systick.hpp
 *
 *  Created on: 2019/03/31
 *      Author: User
 */

#ifndef MYHEADERS_INTERRUPT_HPP_
#define MYHEADERS_INTERRUPT_HPP_

#include <functional>
#include <vector>

#include "stm32f4xx.h"
#include "stm32f4xx_conf.h"

namespace systick
{
	static std::vector<std::function<void(void)>> sysTick_callsFunctions;

	void init(const uint32_t SysTickFrequency = 1000, const uint32_t IRQ_priority = 0)
	{
		RCC_ClocksTypeDef RCC_Clocks;
		RCC_GetClocksFreq(&RCC_Clocks);
		SysTick_Config(RCC_Clocks.HCLK_Frequency / SysTickFrequency);
		NVIC_SetPriority(SysTick_IRQn, 3);
	}

	void additionCallFunction(const std::function<void(void)>&& addFunc){ sysTick_callsFunctions.push_back(addFunc); }

	extern "C"
	{
		void SysTick_Handler(){ for(auto i : sysTick_callsFunctions)i(); }
	}
}

namespace EXTI0Intrrupt
{
	static std::vector<std::function<void(void)>> callsFunctions;

	void init(const uint8_t IRQ_priority)
	{
		//RCC_APB2PeriphResetCmd(RCC_APB2Periph_EXTIT, ENABLE);

		SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource0);

		EXTI_InitTypeDef EXTI_InitStruct;
		EXTI_InitStruct.EXTI_Line		= EXTI_Line0;
		EXTI_InitStruct.EXTI_Mode		= EXTI_Mode_Interrupt;
		EXTI_InitStruct.EXTI_Trigger	= EXTI_Trigger_Rising_Falling;
		EXTI_InitStruct.EXTI_LineCmd	= ENABLE;
		EXTI_Init(&EXTI_InitStruct);

		NVIC_InitTypeDef NVIC_initStruct;
		NVIC_initStruct.NVIC_IRQChannel	= EXTI0_IRQn;
		NVIC_initStruct.NVIC_IRQChannelPreemptionPriority = IRQ_priority;
		NVIC_initStruct.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_initStruct);
	}

	void additionCallFunction(const std::function<void(void)>&& addFunc){ callsFunctions.push_back(addFunc); }


}


#endif /* MYHEADERS_INTERRUPT_HPP_ */
