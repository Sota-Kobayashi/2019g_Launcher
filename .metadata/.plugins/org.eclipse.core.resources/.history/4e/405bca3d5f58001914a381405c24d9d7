/*
 * led.h
 *
 *  Created on: 2019/03/12
 *      Author: User
 */

#ifndef MYHEADERS_LED_HPP_
#define MYHEADERS_LED_HPP_

#include "stm32f4xx.h"
#include "stm32f4xx_conf.h"

enum class ledColor : uint16_t { Yellow = 0x8000, Orange = 0x0004, Red = 0x0010 };
enum class state : bool { ON = true, OFF = false };

template<ledColor useColor>
class LED
{
public:
	LED()
	{
		/*Enable to supply clock for GPIOs.*/
		if constexpr(useColor == ledColor::Yellow)
		{
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
		}
		else
		{
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
		}


		/*Configuration GPIO pins.*/
		constexpr GPIO_InitTypeDef GPIO_InitStruct
		{
			(uint32_t)useColor,
			GPIO_Mode_OUT,
			GPIO_Speed_100MHz,
			GPIO_OType_PP,
			GPIO_PuPd_DOWN
			GPIO_Init
		};
		GPIO_Init_reference(use_gpioPort_(), GPIO_InitStruct);
	}



	void setNewState(state newState)
	{
		if(newState == state::ON)GPIO_SetBits(use_gpioPort_(), (uint16_t)useColor);
		else GPIO_ResetBits(use_gpioPort_(), (uint16_t)useColor);
	}


	inline void toggle(){ GPIO_ToggleBits(use_gpioPort_(), (uint16_t)useColor); }

protected:
	constexpr GPIO_TypeDef* use_gpioPort_(){ return useColor == ledColor::Yellow ? GPIOA : GPIOB; }

};



#endif /* MYHEADERS_LED_HPP_ */
