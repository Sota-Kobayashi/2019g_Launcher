/*
 * position_pid.hpp
 *
 *  Created on: 2019/04/06
 *      Author: User
 */

#ifndef MYHEADERS_POSITION_PID_HPP_
#define MYHEADERS_POSITION_PID_HPP_

#include <motor_driver.hpp>
#include <rotary_encoder.hpp>

typedef struct
{
	const double P;
	const double I;
	const double D;
}PIDgain_positon;

typedef struct
{
	PIDgain_positon useGain;

	const MotorDriver::SendParamsType sendDriverParams;

	const encoderName useRotEnc;
	const uint32_t rotEncPPR;
	const uint8_t useDriverAdd;

}PositionPID_initStructType;

class PositionPID : protected RotaryEncoder, public MotorDriver
{
public:
	PositionPID() = delete;
	PositionPID(const PositionPID_initStructType& initStruct) :
		RotaryEncoder(initStruct.useRotEnc),
		MotorDriver(initStruct.useDriverAdd),
		ppr_(initStruct.rotEncPPR),
		PIDgain_(initStruct.useGain)
	{

	}
	inline void setTargetPosition(const double setSpeed){ targetPosition_ = setSpeed; }
	const double& targetPosition = targetPosition_;

	virtual void positionPID_update() final ;

	inline void setPositionCount(uint32_t setCount)
	{
		nowCount_ = setCount;
		RotaryEncoder::clearCount();
	}
	template<typename T>
	inline T readPositionCount() const { return (T)nowCount_; }

	inline void setEnableState(const bool setState){ position_pid_enable_ = setState; }
	const bool& isSpeedPID_Enable = position_pid_enable_;

	virtual ~PositionPID(){}

private:
	const uint32_t ppr_;
	double targetPosition_ = 0.0;
	bool position_pid_enable_ = false;
	uint32_t nowCount_ = RotaryEncoder::readCount<uint32_t>();
protected:
	PIDgain_positon PIDgain_;

};



#endif /* MYHEADERS_POSITION_PID_HPP_ */
