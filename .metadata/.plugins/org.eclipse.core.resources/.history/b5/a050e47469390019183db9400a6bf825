#include "motor.h"

motorControl::motorControl()
{
	GPIO_PinsInit_();
	timerInit_(defaultResolution_, defaultFrequency_);
}

motorControl::motorControl(const uint16_t resolution, const uint16_t frequency)
{
	GPIO_PinsInit_();
	timerInit_(resolution, frequency);
}

void motorControl::setSpeed(const uint16_t setValue) const
{

}

motorControl::~motorControl()
{

}

constexpr uint16_t motorControl::prescaler_
	(const uint16_t resolution, const uint16_t pwmFreq, const uint32_t timerFrequency)
{
	return (timerFrequency / (pwmFreq * resolution));
}

void motorControl::GPIO_PinsInit_()
{

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_StructInit(&GPIO_InitStruct);
	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_InitStruct.GPIO_Mode	= GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_PuPd	= GPIO_PuPd_DOWN;
	GPIO_InitStruct.GPIO_OType	= GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Speed	= GPIO_Speed_100MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Pin	= GPIO_Pin_0;
	GPIO_Init(GPIOB, &GPIO_InitStruct);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_TIM1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM1);
}

void motorControl::timerInit_(const uint16_t resolution, const uint16_t pwmFreq)
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1 , ENABLE);

	RCC_ClocksTypeDef RCC_ClocksStruct;
	RCC_GetClocksFreq(&RCC_ClocksStruct);
	const uint32_t nowTimer1Clock = RCC_ClocksStruct.PCLK2_Frequency;

	TIM_TimeBaseInitTypeDef timerBaseInitStructure;
	TIM_TimeBaseStructInit(&timerBaseInitStructure);
	timerBaseInitStructure.TIM_Period			= resolution - 1;
	timerBaseInitStructure.TIM_Prescaler		= prescaler_(resolution, pwmFreq, nowTimer1Clock) - 1;
	timerBaseInitStructure.TIM_ClockDivision 	= TIM_CKD_DIV2;
	TIM_TimeBaseInit(TIM1 , &timerBaseInitStructure);

	TIM_Cmd(TIM1 , ENABLE);

	TIM_CtrlPWMOutputs(TIM1 , ENABLE);

	TIM_OCInitTypeDef timerOCInitStructure;
	timerOCInitStructure.TIM_OCMode			= TIM_OCMode_PWM1;
	timerOCInitStructure.TIM_OutputState	= TIM_OutputState_Enable;
	timerOCInitStructure.TIM_OutputNState	= TIM_OutputNState_Enable;
	timerOCInitStructure.TIM_Pulse			= 0x0000;
	timerOCInitStructure.TIM_OCPolarity		= TIM_OCPolarity_High;
	timerOCInitStructure.TIM_OCNPolarity	= TIM_OCNPolarity_High;
	timerOCInitStructure.TIM_OCIdleState	= TIM_OCIdleState_Set;
	timerOCInitStructure.TIM_OCNIdleState	= TIM_OCNIdleState_Set;
	TIM_OC1Init(TIM1 , &timerOCInitStructure);
	TIM_OC2Init(TIM1 , &timerOCInitStructure);

	TIM_OC1PreloadConfig(TIM1 , TIM_OCPreload_Enable);
	TIM_OC2PreloadConfig(TIM1 , TIM_OCPreload_Enable);

	TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
	TIM_BDTRStructInit(&TIM_BDTRInitStructure);
	TIM_BDTRInitStructure.TIM_DeadTime			= 1;
	TIM_BDTRInitStructure.TIM_AutomaticOutput	= TIM_AutomaticOutput_Enable;

	TIM_BDTRConfig(TIM1 , &TIM_BDTRInitStructure);
}
